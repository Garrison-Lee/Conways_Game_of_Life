This ScriptableObjects 'feature' is something I created with a friend on a personal project that I like to port into pretty much every fresh project. You've probably listened to the GDC talks on the subject. 

It contains Scriptable Variables which allow me to easily store persistent data and also place variables outside the scope of any specific monobehaviour while still allowing anyone who needs it to easily know about it. This avoids race conditions, confusing dependencies, and really empowers modularity as many of my components work in a total vacuum. Monobehaviours with references to one of these variables can subscribe to OnChange events or simply read/write the value as needed.

It also contains Scriptable Events and Listeners which allow a monobehaviour to invoke a referenced event with a corresponding argument. Separately, you can either have a monobehaviour store a reference to the event(s) it cares about and subscribe/unsubscribe to the event onEnable/onDisable and write new code for how to handle those event(s). OR, and what I've done in this project, you can use the Listener components which automagically (un)subscribe and can be used to call public methods on other components in response to events.
	You'll see, for an easy example, on the ClickDetector component under the Tilemap, it has a reference to a Vector3Int event "TileClickedEvent". It waits for the user to click on a tile then invokes that event with the Vector3Int coordinate of the clicked tile. Then, on the TileManager object, there is a Vector3Int Listener targeting the same "TileClickedEvent" event. When the event is raised, the Listener simply calls the public method "ToggleTile" from the TileManager component and passes the Vector3Int coordinate as an argument.

Note: UnitTests are written but I did not set them up or actually test them in this project as that seemed out of scope